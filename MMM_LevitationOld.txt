using System;
using System.Collections.Generic;
using System.Text;
using XRL.World.Capabilities;
using XRL.World.Parts.Effects;
using XRL.UI;

namespace XRL.World.Parts.Mutation
{
    [Serializable]
    public class MMM_Levitation : BaseMutation, IFlightSource
    {
        public Guid _FlightFlyActivatedAbilityID = Guid.Empty;
        public Guid _FlightLandActivatedAbilityID = Guid.Empty;
        public int BaseFallChance = 0;
        public bool _FlightFlying;

        public MMM_Levitation()
        {
            this.DisplayName = "Levitation";
            this.Type = "Mental";
        }

        public int FlightLevel
        {
            get
            {
                return this.Level;
            }
        }

        public int FlightBaseFallChance
        {
            get
            {
                return this.BaseFallChance;
            }
        }

        public string FlightSourceDescription
        {
            get
            {
                return (string)null;
            }
        }

        public bool FlightRequiresOngoingEffort
        {
            get
            {
                return true;
            }
        }

        public string FlightEvent
        {
            get
            {
                return "CommandFlight";
            }
        }

        public string FlightFlyEvent
        {
            get
            {
                return "CommandFly";
            }
        }

        public string FlightLandEvent
        {
            get
            {
                return "CommandLand";
            }
        }

        public string FlightActivatedAbilityClass
        {
            get
            {
                return "Mental Mutation";
            }
        }

        public bool FlightFlying
        {
            set
            {
                this._FlightFlying = value;
            }
            get
            {
                return this._FlightFlying;
            }
        }

        public Guid FlightFlyActivatedAbilityID
        {
            set
            {
                this._FlightFlyActivatedAbilityID = value;
            }
            get
            {
                return this._FlightFlyActivatedAbilityID;
            }
        }

        public Guid FlightActivatedAbilityID
        {
            set
            {
                this._FlightActivatedAbilityID = value;
            }
            get
            {
                return this._FlightActivatedAbilityID;
            }
        }

        public Guid FlightLandActivatedAbilityID
        {
            set
            {
                this._FlightLandActivatedAbilityID = value;
            }
            get
            {
                return this._FlightLandActivatedAbilityID;
            }
        }

        public override void Register(GameObject Object)
        {
            Object.RegisterPartEvent((IPart)this, "AIGetOffensiveMutationList");
            Object.RegisterPartEvent((IPart)this, "AIGetPassiveMutationList");
            Object.RegisterPartEvent((IPart)this, "EndTurn");
            Object.RegisterPartEvent((IPart)this, "EnteredCell");
            Object.RegisterPartEvent((IPart)this, "CommandFly");
            Object.RegisterPartEvent((IPart)this, "CommandLand");
        }

        public override string GetDescription()
        {
            return "You can levitate.";
        }

        public override string GetLevelText(int Level)
        {
            int num = Math.Max(0, 6 - Level);
            StringBuilder stringBuilder = Event.NewStringBuilder((string)null);
            stringBuilder.Append("While outside, you may levitate (you cannot be hit in melee by grounded creatures while levitating). You may not levitate while travelling.\n");
            return stringBuilder.ToString();
        }

        public void StopLevitating()
        {
            Flight.StopFlying(this.ParentObject, this.ParentObject, (IFlightSource) this, false, false);
        }

        public override bool FireEvent(Event E)
        {
            if (E.ID == "EndTurn")
            {
                if (!this.ParentObject.OnWorldMap())
                    Flight.MaintainFlight(this.ParentObject, this.ParentObject, (IFlightSource) this);
                else
                    this.StopLevitating();
                return true;
            }
            if (E.ID == "EnteredCell")
            {
                Flight.CheckFlight(this.ParentObject, this.ParentObject, (IFlightSource)this);
                return true;
            }
            if (E.ID == "CommandFly")
            {
                if (!this.ParentObject.OnWorldMap())
                {
                    Flight.StartFlying(this.ParentObject, this.ParentObject, (IFlightSource)this);
                }
                return true;
            }
            if (E.ID == "CommandLand")
            {
                this.StopLevitating();              
                return true;
            }
            if (!(E.ID == "AIGetOffensiveMutationList") && !(E.ID == "AIGetPassiveMutationList"))
                return base.FireEvent(E);
            /*if (!this.FlightFlying && Flight.EnvironmentAllowsFlight(this.ParentObject))
            {
                ActivatedAbilityEntry activatedAbilityEntry = Flight.FlyAbility((IFlightSource)this, this.ParentObject);
                if (activatedAbilityEntry != null && activatedAbilityEntry.Cooldown <= 0)
                    E.GetParameter<List<AICommandList>>("List").Add(new AICommandList(this.FlightFlyEvent, 1));
            }*/
            if (E.ID == "AIGetOffensiveMutationList" || E.ID == "AIGetPassiveMutationList")
            {
                if (!this.FlightFlying && Flight.IsAbilityAIUsable((IFlightSource)this, this.ParentObject))
                    E.AddAICommand(this.FlightEvent, 1, (GameObject)null, false);
            }
            return base.FireEvent(E);
        }

        public override bool ChangeLevel(int NewLevel)
        {
           
            return base.ChangeLevel(NewLevel);
        }

        public override bool Mutate(GameObject GO, int Level)
        {
            this.ChangeLevel(Level);
            Flight.AbilitySetup(GO, GO, (IFlightSource) this);
            return base.Mutate(GO, Level);
        }

        public override bool Unmutate(GameObject GO)
        {
            Flight.AbilityTeardown(GO, GO, (IFlightSource)this);
            return base.Unmutate(GO);
        }
    }
}
